{
  "manifest": {
    "name": "htmlparser",
    "description": "Forgiving HTML/XML/RSS Parser in JS for *both* Node and Browsers",
    "version": "1.7.7",
    "author": {
      "name": "Chris Winberry",
      "email": "chris@winberry.net"
    },
    "contributors": [],
    "repository": {
      "type": "git",
      "url": "https://github.com/tautologistics/node-htmlparser"
    },
    "keywords": [
      "html",
      "xml",
      "rss",
      "parser"
    ],
    "main": "./lib/htmlparser",
    "homepage": "http://github.com/tautologistics/node-htmlparser",
    "bugs": {
      "url": "http://github.com/tautologistics/node-htmlparser/issues"
    },
    "engines": {
      "node": ">=0.1.33"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://github.com/tautologistics/node-htmlparser/raw/master/LICENSE"
      }
    ],
    "readme": "#NodeHtmlParser\nA forgiving HTML/XML/RSS parser written in JS for both the browser and NodeJS (yes, despite the name it works just fine in any modern browser). The parser can handle streams (chunked data) and supports custom handlers for writing custom DOMs/output.\n\n##Installing\n\n\tnpm install htmlparser\n\n##Running Tests\n\n###Run tests under node:\n\tnode runtests.js\n\n###Run tests in browser:\nView runtests.html in any browser\n\n##Usage In Node\n\n```javascript\nvar htmlparser = require(\"htmlparser\");\nvar rawHtml = \"Xyz <script language= javascript>var foo = '<<bar>>';< /  script><!--<!-- Waah! -- -->\";\nvar handler = new htmlparser.DefaultHandler(function (error, dom) {\n\tif (error)\n\t\t[...do something for errors...]\n\telse\n\t\t[...parsing done, do something...]\n});\nvar parser = new htmlparser.Parser(handler);\nparser.parseComplete(rawHtml);\nsys.puts(sys.inspect(handler.dom, false, null));\n```\n\n##Usage In Browser\n\n```javascript\nvar handler = new Tautologistics.NodeHtmlParser.DefaultHandler(function (error, dom) {\n\tif (error)\n\t\t[...do something for errors...]\n\telse\n\t\t[...parsing done, do something...]\n});\nvar parser = new Tautologistics.NodeHtmlParser.Parser(handler);\nparser.parseComplete(document.body.innerHTML);\nalert(JSON.stringify(handler.dom, null, 2));\n```\n\n##Example output\n\n```javascript\n[ { raw: 'Xyz ', data: 'Xyz ', type: 'text' }\n  , { raw: 'script language= javascript'\n  , data: 'script language= javascript'\n  , type: 'script'\n  , name: 'script'\n  , attribs: { language: 'javascript' }\n  , children: \n     [ { raw: 'var foo = \\'<bar>\\';<'\n       , data: 'var foo = \\'<bar>\\';<'\n       , type: 'text'\n       }\n     ]\n  }\n, { raw: '<!-- Waah! -- '\n  , data: '<!-- Waah! -- '\n  , type: 'comment'\n  }\n]\n```\n\n##Streaming To Parser\n\n```javascript\nwhile (...) {\n\t...\n\tparser.parseChunk(chunk);\n}\nparser.done();\t\n```\n\n##Parsing RSS/Atom Feeds\n\n```javascript\nnew htmlparser.RssHandler(function (error, dom) {\n\t...\n});\n```\n\n##DefaultHandler Options\n\n###Usage\n\n```javascript\nvar handler = new htmlparser.DefaultHandler(\n\t  function (error) { ... }\n\t, { verbose: false, ignoreWhitespace: true }\n\t);\n```\n\n###Option: ignoreWhitespace\nIndicates whether the DOM should exclude text nodes that consists solely of whitespace. The default value is \"false\".\n\n####Example: true\n\nThe following HTML:\n\n```html\n<font>\n\t<br>this is the text\n<font>\n```\n\nbecomes:\n\n```javascript\n[ { raw: 'font'\n  , data: 'font'\n  , type: 'tag'\n  , name: 'font'\n  , children: \n     [ { raw: 'br', data: 'br', type: 'tag', name: 'br' }\n     , { raw: 'this is the text\\n'\n       , data: 'this is the text\\n'\n       , type: 'text'\n       }\n     , { raw: 'font', data: 'font', type: 'tag', name: 'font' }\n     ]\n  }\n]\n```\n\n####Example: false\n\nThe following HTML:\n\n```html\n<font>\n\t<br>this is the text\n<font>\n```\n\nbecomes:\n\n```javascript\n[ { raw: 'font'\n  , data: 'font'\n  , type: 'tag'\n  , name: 'font'\n  , children: \n     [ { raw: '\\n\\t', data: '\\n\\t', type: 'text' }\n     , { raw: 'br', data: 'br', type: 'tag', name: 'br' }\n     , { raw: 'this is the text\\n'\n       , data: 'this is the text\\n'\n       , type: 'text'\n       }\n     , { raw: 'font', data: 'font', type: 'tag', name: 'font' }\n     ]\n  }\n]\n```\n\n###Option: verbose\nIndicates whether to include extra information on each node in the DOM. This information consists of the \"raw\" attribute (original, unparsed text found between \"<\" and \">\") and the \"data\" attribute on \"tag\", \"script\", and \"comment\" nodes. The default value is \"true\". \n\n####Example: true\nThe following HTML:\n\n```html\n<a href=\"test.html\">xxx</a>\n```\n\nbecomes:\n\n```javascript\n[ { raw: 'a href=\"test.html\"'\n  , data: 'a href=\"test.html\"'\n  , type: 'tag'\n  , name: 'a'\n  , attribs: { href: 'test.html' }\n  , children: [ { raw: 'xxx', data: 'xxx', type: 'text' } ]\n  }\n]\n```\n\n####Example: false\nThe following HTML:\n\n```javascript\n<a href=\"test.html\">xxx</a>\n```\n\nbecomes:\n\n```javascript\n[ { type: 'tag'\n  , name: 'a'\n  , attribs: { href: 'test.html' }\n  , children: [ { data: 'xxx', type: 'text' } ]\n  }\n]\n```\n\n###Option: enforceEmptyTags\nIndicates whether the DOM should prevent children on tags marked as empty in the HTML spec. Typically this should be set to \"true\" HTML parsing and \"false\" for XML parsing. The default value is \"true\".\n\n####Example: true\nThe following HTML:\n\n```html\n<link>text</link>\n```\n\nbecomes:\n\n```javascript\n[ { raw: 'link', data: 'link', type: 'tag', name: 'link' }\n, { raw: 'text', data: 'text', type: 'text' }\n]\n```\n\n####Example: false\nThe following HTML:\n\n```html\n<link>text</link>\n```\n\nbecomes:\n\n```javascript\n[ { raw: 'link'\n  , data: 'link'\n  , type: 'tag'\n  , name: 'link'\n  , children: [ { raw: 'text', data: 'text', type: 'text' } ]\n  }\n]\n```\n\n##DomUtils\n\n###TBD (see utils_example.js for now)\n\n##Related Projects\n\nLooking for CSS selectors to search the DOM? Try Node-SoupSelect, a port of SoupSelect to NodeJS: http://github.com/harryf/node-soupselect\n\nThere's also a port of hpricot to NodeJS that uses HtmlParser for HTML parsing: http://github.com/silentrob/Apricot\n\n",
    "readmeFilename": "README.md",
    "_id": "htmlparser@1.7.6",
    "_from": "htmlparser@",
    "_registry": "npm",
    "_loc": "C:\\Users\\Kyonax\\AppData\\Roaming\\Hyper\\.hyper_plugins\\cache\\v6\\npm-htmlparser-1.7.7-19e7b3997ff6fbac99ae5a7d2766489efe7e2d0e-integrity\\node_modules\\htmlparser\\package.json",
    "license": "MIT",
    "licenseText": "Copyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/htmlparser/-/htmlparser-1.7.7.tgz#19e7b3997ff6fbac99ae5a7d2766489efe7e2d0e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/htmlparser/-/htmlparser-1.7.7.tgz",
    "hash": "19e7b3997ff6fbac99ae5a7d2766489efe7e2d0e",
    "integrity": "sha1-GeezmX/2+6yZrlp9J2ZInv5+LQ4=",
    "registry": "npm",
    "packageName": "htmlparser",
    "cacheIntegrity": "sha512-zpK66ifkT0fauyFh2Mulrq4AqGTucxGtOhZ8OjkbSfcCpkqQEI8qRkY0tSQSJNAQ4HUZkgWaU4fK4EH6SVH9PQ== sha1-GeezmX/2+6yZrlp9J2ZInv5+LQ4="
  },
  "registry": "npm",
  "hash": "19e7b3997ff6fbac99ae5a7d2766489efe7e2d0e"
}