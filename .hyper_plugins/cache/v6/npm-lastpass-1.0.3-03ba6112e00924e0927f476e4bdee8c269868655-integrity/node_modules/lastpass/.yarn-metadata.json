{
  "manifest": {
    "name": "lastpass",
    "version": "1.0.3",
    "description": "A Lastpass client for Node.js!",
    "main": "./dist/index.js",
    "dependencies": {
      "babel-runtime": "^6.11.6",
      "bluebird": "^3.4.1",
      "es6-error": "^3.0.1",
      "form-data": "^1.0.0-rc4",
      "fuzzaldrin": "^2.1.0",
      "html-to-text": "^2.1.3",
      "node-fetch": "^1.5.3",
      "sanitize-filename": "^1.6.0",
      "xml2js": "^0.4.17"
    },
    "devDependencies": {
      "babel-cli": "^6.11.4",
      "babel-plugin-transform-runtime": "^6.9.0",
      "babel-preset-modern-node": "^2.2.1",
      "babel-preset-stage-0": "^6.5.0"
    },
    "scripts": {
      "example": "babel-node ./example/index.js",
      "prepublish": "mkdir -p ./dist/lib; babel ./index.js -o ./dist/index.js; babel ./lib -d ./dist/lib;"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dfrankland/lastpass-node.git"
    },
    "keywords": [
      "lastpass",
      "passwords",
      "client"
    ],
    "author": {
      "name": "Dylan Frankland",
      "email": "dylan@frankland.io"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dfrankland/lastpass-node/issues"
    },
    "homepage": "https://github.com/dfrankland/lastpass-node#readme",
    "babel": {
      "presets": [
        "modern-node/6.0",
        "stage-0"
      ],
      "plugins": [
        "transform-runtime"
      ]
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\Kyonax\\AppData\\Roaming\\Hyper\\.hyper_plugins\\cache\\v6\\npm-lastpass-1.0.3-03ba6112e00924e0927f476e4bdee8c269868655-integrity\\node_modules\\lastpass\\package.json",
    "readmeFilename": "README.md",
    "readme": "# lastpass-node\n\n> Lastpass client for Node.js\n\n## About\n\nI always see people using other password integrations with Node.js, like\n1Password, and that made me sad. I _really_ like Lastpass, but it seems they\naren't too dev friendly. This changes that! Now it's extremely easy to access\nyour Lastpass Vault, securely, and with a promised based API.\n\n### Getting started\n\n1.  Install and save the package\n\n    ```bash\n    npm i -S lastpass\n    ```\n\n2.  Import the package\n\n    ```js\n    import Lastpass from 'lastpass'; // ES6\n    // OR\n    var Lastpass = require('lastpass').default; // ES5\n    ```\n\n3.  Instantiate the class `Lastpass`\n\n    ```js\n    const lpass = new Lastpass();\n    ```\n\n### Methods\n\n#### `new Lastpass([username])`\n\nParameters:\n\n*   `username`: Lastpass account username (probably an email) used to set the\n    account from which to load a vault blob file (if it exists);\n\n    *   Type: string\n    *   Required: false\n\n#### `loadVault(username, password, [twoFactor])`\n\nParameters:\n\n*   `username`: Lastpass account username (probably an email)\n\n    *   Type: string\n    *   Required: true\n\n*   `password`: Lastpass account password\n\n    *   Type: string\n    *   Required: true\n\n*   `twoFactor`: Two factor authentication pin (if it's needed and none is\n    provided an error will be thrown)\n\n    *   Type: string\n    *   Required: false\n\nReturns:\n\n*   `Promise`: resolves to `undefined`\n\n#### `loadVaultFile([vaultFile])`\n\nParameters:\n\n*   `vaultFile`: Absolute path to location of a stored vault blob. Defaults to\n    `~/.lastpass-vault-${USERNAME}` if a username is set, otherwise to\n    `~/.lastpass-vault`.\n\n    *   Type: string\n    *   Required: false\n\nReturns:\n\n*   `Promise`: resolves to `undefined`\n\n#### `saveVaultFile([vaultFile, options])`\n\nParameters:\n\n*   `vaultFile`: Absolute path to store a vault blob file. Defaults to\n    `~/.lastpass-vault-${USERNAME}` if a username is set, otherwise to\n    `~/.lastpass-vault`.\n\n    *   Type: string\n    *   Required: false\n\n*   `options`: File options for saving the file. Defaults to\n    `{ encoding: 'binary', mode: 0o400 }` for safe keeping.\n\n    *   Type: object\n    *   Required: false\n\nReturns:\n\n*   `Promise`: resolves to `undefined`\n\n#### `getVault()`\n\nParameters:\n\n*   none\n\nReturns:\n\n*   `Buffer`: encrypted contents of the vault blob from Lastpass\n\n#### `getAccounts(username, password, [search])`\n\nParameters:\n\n*   `username`: Lastpass account username (probably an email)\n\n    *   Type: string\n    *   Required: true\n\n*   `password`: Lastpass account password\n\n    *   Type: string\n    *   Required: true\n\n*   `search`: Object containing a `keyword` to search for and `options` for\n    [`fuzzaldrin`][1]. If a this object isn't provided, or a `keyword` isn't set\n    all accounts will be returned. The `options` object defaults to\n    `{ key: 'name' }`.\n\n    *   Type: object\n    *   Required: false\n\nReturns:\n\n*   `Promise`: resolves to an `Array` of matched accounts\n\n### Credit\n\nThis wouldn't be possible without the amazing [`lastpass-ruby`][2] and\n[`lastpass-cli`][3].\n\n[1]: https://github.com/atom/fuzzaldrin\n[2]: https://github.com/detunized/lastpass-ruby\n[3]: https://github.com/lastpass/lastpass-cli\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/lastpass/-/lastpass-1.0.3.tgz#03ba6112e00924e0927f476e4bdee8c269868655",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/lastpass/-/lastpass-1.0.3.tgz",
    "hash": "03ba6112e00924e0927f476e4bdee8c269868655",
    "integrity": "sha512-gAbBL/CFQXrSJ8lvCUfied5D65/ZRh/6a7uieyHnxdtiIBbwauxI9zkWgEiuAge/UZUISCeHmU2Hn/drkHPI+A==",
    "registry": "npm",
    "packageName": "lastpass",
    "cacheIntegrity": "sha512-gAbBL/CFQXrSJ8lvCUfied5D65/ZRh/6a7uieyHnxdtiIBbwauxI9zkWgEiuAge/UZUISCeHmU2Hn/drkHPI+A== sha1-A7phEuAJJOCSf0duS97owmmGhlU="
  },
  "registry": "npm",
  "hash": "03ba6112e00924e0927f476e4bdee8c269868655"
}